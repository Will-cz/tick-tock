#!/usr/bin/env python3
"""
Quick test to verify dialog mocking is working correctly
"""

import unittest
import tempfile
import json
import tkinter as tk
from pathlib import Path
from unittest.mock import patch, MagicMock
import sys
import os

sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

class TestDialogMocking(unittest.TestCase):
    """Test that dialog mocking prevents popup blocking"""
    
    def setUp(self):
        """Set up test environment"""
        self.temp_dir = tempfile.mkdtemp()
        self.root = tk.Tk()
        self.root.withdraw()
    
    def tearDown(self):
        """Clean up"""
        try:
            self.root.destroy()
        except tk.TclError:
            pass
        
        import shutil
        try:
            shutil.rmtree(self.temp_dir)
        except Exception:
            pass
    
    def test_dialog_mocking_basics(self):
        """Test that basic dialog mocking works"""
        print("\n=== Testing Dialog Mocking ===")
        
        # Test messagebox mocking
        with patch('tkinter.messagebox.showinfo') as mock_showinfo, \
             patch('tkinter.messagebox.showerror') as mock_showerror, \
             patch('tkinter.filedialog.asksaveasfilename') as mock_saveas:
            
            # Configure mock returns
            mock_saveas.return_value = str(Path(self.temp_dir) / "test_export.txt")
            
            # Test that mocks are working
            import tkinter.messagebox as messagebox
            import tkinter.filedialog as filedialog
            
            # These should not block
            messagebox.showinfo("Test", "This should not block")
            messagebox.showerror("Test", "This should not block")
            filename = filedialog.asksaveasfilename()
            
            # Verify mocks were called
            mock_showinfo.assert_called_once()
            mock_showerror.assert_called_once()
            mock_saveas.assert_called_once()
            
            # Verify return value
            self.assertTrue(filename.endswith("test_export.txt"))
            
            print("✓ Dialog mocking working correctly")
    
    def test_monthly_report_creation(self):
        """Test creating MonthlyReportWindow with mocked dialogs"""
        print("\n=== Testing MonthlyReportWindow Creation ===")
        
        try:
            from tick_tock_widget.monthly_report import MonthlyReportWindow
            from tick_tock_widget.project_data import ProjectDataManager
            
            # Create test data file
            test_data = {
                "projects": [],
                "current_project_alias": None,
                "current_sub_activity_alias": None
            }
            
            test_file = Path(self.temp_dir) / "test.json"
            with open(test_file, 'w') as f:
                json.dump(test_data, f)
            
            # Create data manager
            dm = ProjectDataManager(str(test_file))
            dm.load_projects()
            
            # Mock parent
            mock_parent = MagicMock()
            mock_parent.root = self.root
            
            # Test theme (using dict format that works)
            theme = {
                'name': 'Test',
                'bg': '#000000',
                'fg': '#FFFFFF',
                'accent': '#00FF00',
                'button_bg': '#111111',
                'button_fg': '#EEEEEE',
                'button_active': '#222222'
            }
            
            # Create window with all dialogs mocked
            with patch.object(tk.Toplevel, 'mainloop'), \
                 patch('tkinter.messagebox.showinfo'), \
                 patch('tkinter.messagebox.showerror'), \
                 patch('tkinter.filedialog.asksaveasfilename'):
                
                window = MonthlyReportWindow(mock_parent, dm, theme)
                
                # Verify window was created
                self.assertIsNotNone(window)
                print("✓ MonthlyReportWindow created successfully with mocked dialogs")
                
                # Test calling _export_txt (should not block)
                export_file = Path(self.temp_dir) / "test_export.txt"
                try:
                    window._export_txt(str(export_file), 2025, 8)
                    print("✓ _export_txt completed without blocking")
                    
                    # Verify file was created
                    if export_file.exists():
                        print(f"✓ Export file created: {export_file.stat().st_size} bytes")
                    else:
                        print("⚠️ Export file was not created")
                
                except Exception as e:
                    print(f"⚠️ _export_txt error (but did not block): {e}")
        
        except ImportError as e:
            print(f"⚠️ MonthlyReportWindow not available: {e}")
        except Exception as e:
            print(f"⚠️ Test error: {e}")
    
    def test_window_operations_mocking(self):
        """Test that window operations are properly mocked"""
        print("\n=== Testing Window Operations Mocking ===")
        
        with patch.object(tk.Toplevel, 'mainloop'), \
             patch.object(tk.Toplevel, 'wait_window'), \
             patch.object(tk.Toplevel, 'grab_set'), \
             patch.object(tk.Toplevel, 'grab_release'):
            
            # Create a toplevel window
            window = tk.Toplevel(self.root)
            window.title("Test Window")
            
            # These operations should not block
            window.grab_set()    # Should be mocked
            window.grab_release() # Should be mocked
            
            # Destroy immediately
            window.destroy()
            
            print("✓ Window operations mocked successfully")


if __name__ == '__main__':
    unittest.main(verbosity=2)
