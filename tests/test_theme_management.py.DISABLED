#!/usr/bin/env python3
"""
Theme Management and UI Visual Testing
Tests theme switching, color validation, and UI consistency
"""

import unittest
import tempfile
import json
import colorsys
from pathlib import Path
from unittest.mock import patch, MagicMock
import tkinter as tk

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from tick_tock_widget.theme_colors import ThemeColors
from tick_tock_widget.tick_tock_widget import TickTockWidget
from tick_tock_widget.project_data import ProjectDataManager


class TestThemeManagement(unittest.TestCase):
    """Test theme switching and color management"""
    
    def setUp(self):
        """Set up test environment"""
        self.temp_dir = tempfile.mkdtemp()
        self.test_data_file = Path(self.temp_dir) / "theme_test.json"
        
        # Create test data
        test_data = {
            "projects": [
                {
                    "name": "Theme Test Project",
                    "dz_number": "TH-001",
                    "alias": "theme_test",
                    "sub_activities": [],
                    "time_records": {}
                }
            ],
            "current_project_alias": None,
            "current_sub_activity_alias": None
        }
        
        with open(self.test_data_file, 'w', encoding='utf-8') as f:
            json.dump(test_data, f, indent=2)
        
        self.root = tk.Tk()
        self.root.withdraw()
    
    def tearDown(self):
        """Clean up test environment"""
        try:
            self.root.destroy()
        except tk.TclError:
            pass
        
        import shutil
        try:
            shutil.rmtree(self.temp_dir)
        except Exception:
            pass
    
    def test_theme_color_adjustment(self):
        """Test color lightness adjustment in themes"""
        print("\n=== Theme Test: Color Adjustment ===")
        
        # Import MonthlyReportWindow to test color adjustment
        try:
            from tick_tock_widget.monthly_report import MonthlyReportWindow
        except ImportError:
            self.skipTest("MonthlyReportWindow not available")
        
        # Create data manager
        dm = ProjectDataManager(str(self.test_data_file))
        dm.load_projects()
        
        # Create mock parent
        mock_parent = MagicMock()
        mock_parent.root = self.root
        
        # Test theme
        theme = {
            'name': 'Color Test',
            'bg': '#FF0000',  # Pure red
            'fg': '#00FF00',  # Pure green
            'accent': '#0000FF',  # Pure blue
            'button_bg': '#808080',  # Gray
            'button_fg': '#FFFFFF',  # White
            'button_active': '#404040'  # Dark gray
        }
        
        with patch.object(tk.Toplevel, 'mainloop'), \
             patch('tkinter.messagebox.showinfo'), \
             patch('tkinter.messagebox.showerror'), \
             patch('tkinter.filedialog.asksaveasfilename'):
            
            window = MonthlyReportWindow(mock_parent, dm, theme)
            
            # Test color adjustment method
            if hasattr(window, '_adjust_color'):
                # Test lightening
                lighter = window._adjust_color('#808080', 1.5)
                self.assertIsInstance(lighter, str)
                self.assertTrue(lighter.startswith('#'))
                self.assertEqual(len(lighter), 7)
                print(f"✓ Lightened #808080 to {lighter}")
                
                # Test darkening
                darker = window._adjust_color('#808080', 0.5)
                self.assertIsInstance(darker, str)
                self.assertTrue(darker.startswith('#'))
                self.assertEqual(len(darker), 7)
                print(f"✓ Darkened #808080 to {darker}")
                
                # Test edge cases
                black = window._adjust_color('#000000', 1.5)
                self.assertIsInstance(black, str)
                print(f"✓ Black adjustment: {black}")
                
                white = window._adjust_color('#FFFFFF', 0.5)
                self.assertIsInstance(white, str)
                print(f"✓ White adjustment: {white}")
    
    def test_theme_switching_validation(self):
        """Test theme changes and validation"""
        print("\n=== Theme Test: Theme Switching ===")
        
        # Create widget with custom data file
        widget = TickTockWidget()
        widget.data_manager.data_file = str(self.test_data_file)
        widget.data_manager.load_projects()
        
        # Test initial theme
        initial_theme = widget.get_current_theme()
        self.assertIsInstance(initial_theme, dict)
        self.assertIn('name', initial_theme)
        self.assertIn('bg', initial_theme)
        self.assertIn('fg', initial_theme)
        print(f"✓ Initial theme: {initial_theme['name']}")
        
        # Test switching themes
        available_themes = ['Matrix', 'Cyberpunk', 'Ocean', 'Forest', 'Sunset', 'Midnight']
        
        for theme_name in available_themes:
            try:
                widget.switch_theme(theme_name)
                current_theme = widget.get_current_theme()
                self.assertEqual(current_theme['name'], theme_name)
                
                # Validate color format
                self.assertTrue(current_theme['bg'].startswith('#'))
                self.assertTrue(current_theme['fg'].startswith('#'))
                self.assertTrue(current_theme['accent'].startswith('#'))
                
                print(f"✓ Switched to {theme_name}: {current_theme['bg']}")
                
            except Exception as e:
                print(f"⚠️ Theme {theme_name} not available: {e}")
    
    def test_invalid_theme_colors(self):
        """Test handling of malformed hex colors"""
        print("\n=== Theme Test: Invalid Color Handling ===")
        
        # Test invalid color formats
        invalid_colors = [
            'not_a_color',
            '#GGG',
            '#12345',  # Too short
            '#1234567',  # Too long
            'rgb(255,0,0)',  # RGB format
            '#',  # Just hash
            '',  # Empty string
            None  # None value
        ]
        
        for invalid_color in invalid_colors:
            try:
                # Test if color adjustment handles invalid input gracefully
                from tick_tock_widget.monthly_report import MonthlyReportWindow
                
                dm = ProjectDataManager(str(self.test_data_file))
                dm.load_projects()
                
                mock_parent = MagicMock()
                mock_parent.root = self.root
                
                theme = {
                    'name': 'Test',
                    'bg': invalid_color or '#000000',
                    'fg': '#FFFFFF',
                    'accent': '#FF0000',
                    'button_bg': '#111111',
                    'button_fg': '#EEEEEE',
                    'button_active': '#222222'
                }
                
                with patch.object(tk.Toplevel, 'mainloop'), \
                     patch('tkinter.messagebox.showinfo'), \
                     patch('tkinter.messagebox.showerror'), \
                     patch('tkinter.filedialog.asksaveasfilename'):
                    
                    window = MonthlyReportWindow(mock_parent, dm, theme)
                    
                    if hasattr(window, '_adjust_color') and invalid_color:
                        try:
                            result = window._adjust_color(invalid_color, 1.0)
                            print(f"✓ Invalid color {invalid_color} handled gracefully: {result}")
                        except Exception as e:
                            print(f"✓ Invalid color {invalid_color} failed gracefully: {type(e).__name__}")
                    
            except ImportError:
                print(f"✓ Invalid color {invalid_color} skipped (MonthlyReportWindow not available)")
            except Exception as e:
                print(f"✓ Invalid color {invalid_color} handled: {type(e).__name__}")
    
    def test_theme_inheritance_across_windows(self):
        """Test theme consistency across all windows"""
        print("\n=== Theme Test: Theme Inheritance ===")
        
        # Create main widget
        widget = TickTockWidget()
        widget.data_manager.data_file = str(self.test_data_file)
        widget.data_manager.load_projects()
        
        # Get main theme
        main_theme = widget.get_current_theme()
        
        # Test project management window theme inheritance
        try:
            from tick_tock_widget.project_management import ProjectManagementWindow
            
            with patch.object(tk.Toplevel, 'mainloop'):
                pm_window = ProjectManagementWindow(
                    widget, 
                    widget.data_manager, 
                    None, 
                    main_theme
                )
                
                # Verify theme was passed correctly
                self.assertEqual(pm_window.theme['name'], main_theme['name'])
                self.assertEqual(pm_window.theme['bg'], main_theme['bg'])
                print(f"✓ Project management window inherited theme: {main_theme['name']}")
                
        except ImportError:
            print("⚠️ ProjectManagementWindow not available for theme inheritance test")
        
        # Test monthly report window theme inheritance
        try:
            from tick_tock_widget.monthly_report import MonthlyReportWindow
            
            with patch.object(tk.Toplevel, 'mainloop'), \
                 patch('tkinter.messagebox.showinfo'), \
                 patch('tkinter.messagebox.showerror'), \
                 patch('tkinter.filedialog.asksaveasfilename'):
                
                mr_window = MonthlyReportWindow(widget, widget.data_manager, main_theme)
                
                # Verify theme was passed correctly
                self.assertEqual(mr_window.theme['name'], main_theme['name'])
                self.assertEqual(mr_window.theme['bg'], main_theme['bg'])
                print(f"✓ Monthly report window inherited theme: {main_theme['name']}")
                
        except ImportError:
            print("⚠️ MonthlyReportWindow not available for theme inheritance test")
    
    def test_theme_persistence(self):
        """Test theme persistence across sessions"""
        print("\n=== Theme Test: Theme Persistence ===")
        
        # Create first widget instance
        widget1 = TickTockWidget()
        widget1.data_manager.data_file = str(self.test_data_file)
        
        # Change theme
        try:
            widget1.switch_theme('Cyberpunk')
            theme1 = widget1.get_current_theme()
            
            # Simulate app restart by creating new instance
            widget2 = TickTockWidget()
            widget2.data_manager.data_file = str(self.test_data_file)
            theme2 = widget2.get_current_theme()
            
            # Note: Theme persistence might not be implemented yet
            # This test documents the expected behavior
            print(f"✓ First instance theme: {theme1['name']}")
            print(f"✓ Second instance theme: {theme2['name']}")
            
            # Document current behavior
            if theme1['name'] == theme2['name']:
                print("✓ Theme persistence working")
            else:
                print("ℹ️ Theme persistence not implemented (expected)")
            
        except Exception as e:
            print(f"✓ Theme persistence test handled gracefully: {e}")


if __name__ == '__main__':
    unittest.main(verbosity=2)
