#!/usr/bin/env python3
"""Comprehensive tests for TickTockWidget core functionality."""

import sys
import unittest
from unittest.mock import MagicMock, patch
import tempfile
import os

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from tick_tock_widget.tick_tock_widget import TickTockWidget
from tick_tock_widget.project_data import ProjectDataManager

class TestTickTockWidgetCore(unittest.TestCase):
    """Test TickTockWidget core functionality with proper GUI mocking."""
    
    def setUp(self):
        """Set up test fixtures"""
        self.temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False)
        self.temp_file.write('{}')
        self.temp_file.close()
        
        self.test_theme = {
            'bg': '#333333',
            'fg': '#ffffff', 
            'button_bg': '#555555',
            'button_fg': '#ffffff'
        }

    def tearDown(self):
        """Clean up test fixtures"""
        if os.path.exists(self.temp_file.name):
            os.unlink(self.temp_file.name)

    @patch('tick_tock_widget.tick_tock_widget.get_config')
    @patch('tick_tock_widget.tick_tock_widget.ProjectDataManager')
    @patch('tkinter.DoubleVar')
    @patch('tkinter.StringVar')
    @patch('tkinter.ttk.Style')
    @patch('tkinter.ttk.Combobox')
    @patch('tkinter.ttk.Button')
    @patch('tkinter.ttk.Label')
    @patch('tkinter.ttk.Frame')
    @patch('tkinter.Tk')
    def test_widget_initialization(self, mock_tk, mock_frame, mock_label, mock_button,
                                 mock_combobox, mock_style, mock_stringvar, mock_doublevar,
                                 mock_data_manager_class, mock_get_config):
        """Test TickTockWidget initialization"""
        # Configure mocks
        mock_root = MagicMock()
        mock_tk.return_value = mock_root
        mock_root.winfo_screenwidth.return_value = 1920
        mock_root.winfo_screenheight.return_value = 1080
        mock_root.after.return_value = "mock_timer_id"
        
        mock_stringvar.return_value = MagicMock()
        mock_doublevar.return_value = MagicMock()
        mock_style.return_value = MagicMock()
        
        # Mock config
        mock_config = MagicMock()
        mock_config.data_file = self.temp_file.name
        mock_config.themes = [self.test_theme]
        mock_config.current_theme_index = 0
        mock_get_config.return_value = mock_config
        
        # Mock data manager
        mock_data_manager = MagicMock(spec=ProjectDataManager)
        mock_data_manager.projects = []
        mock_data_manager.get_project_aliases.return_value = []
        mock_data_manager.current_project_alias = None
        mock_data_manager_class.return_value = mock_data_manager
        
        # Create widget
        widget = TickTockWidget()
        
        # Test basic attributes
        self.assertIsNotNone(widget)
        self.assertFalse(widget.is_timing)
        self.assertIsNotNone(widget.themes)

    @patch('tick_tock_widget.tick_tock_widget.get_config')
    @patch('tick_tock_widget.tick_tock_widget.ProjectDataManager')
    @patch('tkinter.DoubleVar')
    @patch('tkinter.StringVar')
    @patch('tkinter.ttk.Style')
    @patch('tkinter.ttk.Combobox')
    @patch('tkinter.ttk.Button')
    @patch('tkinter.ttk.Label')
    @patch('tkinter.ttk.Frame')
    @patch('tkinter.Tk')
    def test_timer_functionality(self, mock_tk, mock_frame, mock_label, mock_button, 
                                mock_combobox, mock_style, mock_stringvar, mock_doublevar,
                                mock_data_manager_class, mock_get_config):
        """Test timer start, stop, and reset functionality"""
        # Configure mocks similar to initialization test
        mock_root = MagicMock()
        mock_tk.return_value = mock_root
        mock_root.winfo_screenwidth.return_value = 1920
        mock_root.winfo_screenheight.return_value = 1080
        mock_root.after.return_value = "mock_timer_id"
        
        mock_stringvar.return_value = MagicMock()
        mock_doublevar.return_value = MagicMock()
        mock_style.return_value = MagicMock()
        
        mock_config = MagicMock()
        mock_config.data_file = self.temp_file.name
        mock_config.themes = [self.test_theme]
        mock_config.current_theme_index = 0
        mock_get_config.return_value = mock_config
        
        mock_data_manager = MagicMock(spec=ProjectDataManager)
        mock_data_manager.projects = []
        mock_data_manager.get_project_aliases.return_value = []
        mock_data_manager.current_project_alias = None
        mock_data_manager_class.return_value = mock_data_manager
        
        widget = TickTockWidget()
        
        # Test timer toggle
        widget.toggle_timer()
        self.assertTrue(widget.is_timing)
        
        # Test timer toggle again (stop)
        widget.toggle_timer()
        self.assertFalse(widget.is_timing)

    @patch('tick_tock_widget.tick_tock_widget.get_config')
    @patch('tick_tock_widget.tick_tock_widget.ProjectDataManager')
    @patch('tkinter.DoubleVar')
    @patch('tkinter.StringVar')
    @patch('tkinter.ttk.Style')
    @patch('tkinter.ttk.Combobox')
    @patch('tkinter.ttk.Button')
    @patch('tkinter.ttk.Label')
    @patch('tkinter.ttk.Frame')
    @patch('tkinter.Tk')
    def test_theme_cycling(self, mock_tk, mock_frame, mock_label, mock_button,
                         mock_combobox, mock_style, mock_stringvar, mock_doublevar,
                         mock_data_manager_class, mock_get_config):
        """Test theme cycling functionality"""
        # Setup mocks
        mock_root = MagicMock()
        mock_tk.return_value = mock_root
        mock_root.winfo_screenwidth.return_value = 1920
        mock_root.winfo_screenheight.return_value = 1080
        mock_root.after.return_value = "mock_timer_id"
        
        mock_stringvar.return_value = MagicMock()
        mock_doublevar.return_value = MagicMock()
        mock_style.return_value = MagicMock()
        
        # Mock config with multiple themes
        theme1 = {'bg': '#111111', 'fg': '#ffffff'}
        theme2 = {'bg': '#222222', 'fg': '#ffffff'}
        mock_config = MagicMock()
        mock_config.data_file = self.temp_file.name
        mock_config.themes = [theme1, theme2]
        mock_config.current_theme_index = 0
        mock_get_config.return_value = mock_config
        
        mock_data_manager = MagicMock()
        mock_data_manager.projects = []
        mock_data_manager.get_project_aliases.return_value = []
        mock_data_manager.current_project_alias = None
        mock_data_manager_class.return_value = mock_data_manager
        
        widget = TickTockWidget()
        
        # Test initial theme
        initial_theme = widget.current_theme
        self.assertIsInstance(initial_theme, int)
        
        # Test theme cycling
        widget.cycle_theme()
        new_theme = widget.current_theme
        self.assertNotEqual(initial_theme, new_theme)
        
        # Test get_current_theme method
        current_theme = widget.get_current_theme()
        self.assertIsNotNone(current_theme)
        self.assertEqual(current_theme, widget.themes[widget.current_theme])

    @patch('tick_tock_widget.tick_tock_widget.get_config')
    @patch('tick_tock_widget.tick_tock_widget.ProjectDataManager')
    @patch('tkinter.DoubleVar')
    @patch('tkinter.StringVar')
    @patch('tkinter.ttk.Style')
    @patch('tkinter.ttk.Combobox')
    @patch('tkinter.ttk.Button')
    @patch('tkinter.ttk.Label')
    @patch('tkinter.ttk.Frame')
    @patch('tkinter.Tk')
    def test_project_management(self, mock_tk, mock_frame, mock_label, mock_button,
                              mock_combobox, mock_style, mock_stringvar, mock_doublevar,
                              mock_data_manager_class, mock_get_config):
        """Test project management functionality"""
        # Setup mocks
        mock_root = MagicMock()
        mock_tk.return_value = mock_root
        mock_root.winfo_screenwidth.return_value = 1920
        mock_root.winfo_screenheight.return_value = 1080
        mock_root.after.return_value = "mock_timer_id"
        
        mock_stringvar.return_value = MagicMock()
        mock_doublevar.return_value = MagicMock()
        mock_style.return_value = MagicMock()
        
        # Mock config
        mock_config = MagicMock()
        mock_config.data_file = self.temp_file.name
        mock_config.themes = [self.test_theme]
        mock_config.current_theme_index = 0
        mock_get_config.return_value = mock_config
        
        # Mock data manager with test projects
        mock_data_manager = MagicMock()
        test_projects = [
            {'name': 'Test Project 1', 'alias': 'TP1'},
            {'name': 'Test Project 2', 'alias': 'TP2'}
        ]
        mock_data_manager.projects = test_projects
        mock_data_manager.get_project_aliases.return_value = ['TP1', 'TP2']
        mock_data_manager.current_project_alias = None
        mock_data_manager_class.return_value = mock_data_manager
        
        widget = TickTockWidget()
        
        # Test project data is accessible
        self.assertEqual(len(widget.data_manager.projects), 2)
        self.assertIn('TP1', widget.data_manager.get_project_aliases())
        self.assertIn('TP2', widget.data_manager.get_project_aliases())
        
        # Test update_project_list method
        widget.update_project_list()
        # Should not raise any errors
        self.assertIsNotNone(widget.data_manager)

    @patch('tick_tock_widget.tick_tock_widget.get_config')
    @patch('tick_tock_widget.tick_tock_widget.ProjectDataManager')
    @patch('tkinter.DoubleVar')
    @patch('tkinter.StringVar')
    @patch('tkinter.ttk.Style')
    @patch('tkinter.ttk.Combobox')
    @patch('tkinter.ttk.Button')
    @patch('tkinter.ttk.Label')
    @patch('tkinter.ttk.Frame')
    @patch('tkinter.Tk')
    def test_timer_functionality(self, mock_tk, mock_frame, mock_label, mock_button,
                                mock_combobox, mock_style, mock_stringvar, mock_doublevar,
                                mock_data_manager_class, mock_get_config):
        """Test timer start/stop functionality"""
        # Setup mocks
        mock_root = MagicMock()
        mock_tk.return_value = mock_root
        mock_root.winfo_screenwidth.return_value = 1920
        mock_root.winfo_screenheight.return_value = 1080
        mock_root.after.return_value = "mock_timer_id"
        
        mock_stringvar.return_value = MagicMock()
        mock_doublevar.return_value = MagicMock()
        mock_style.return_value = MagicMock()
        
        # Mock config
        mock_config = MagicMock()
        mock_config.data_file = self.temp_file.name
        mock_config.themes = [self.test_theme]
        mock_config.current_theme_index = 0
        mock_get_config.return_value = mock_config
        
        # Mock data manager
        mock_data_manager = MagicMock()
        mock_data_manager.projects = []
        mock_data_manager.get_project_aliases.return_value = []
        mock_data_manager.current_project_alias = None
        mock_data_manager_class.return_value = mock_data_manager
        
        widget = TickTockWidget()
        
        # Test timer methods exist and can be called
        self.assertTrue(hasattr(widget, 'toggle_timer'))
        self.assertTrue(hasattr(widget, 'update_project_display'))
        
        # Test that timer functionality is accessible
        self.assertIsNotNone(widget.data_manager)

    @patch('tick_tock_widget.tick_tock_widget.get_config')
    @patch('tick_tock_widget.tick_tock_widget.ProjectDataManager')
    @patch('tkinter.DoubleVar')
    @patch('tkinter.StringVar')
    @patch('tkinter.ttk.Style')
    @patch('tkinter.ttk.Combobox')
    @patch('tkinter.ttk.Button')
    @patch('tkinter.ttk.Label')
    @patch('tkinter.ttk.Frame')
    @patch('tkinter.Tk')
    def test_theme_functionality(self, mock_tk, mock_frame, mock_label, mock_button,
                               mock_combobox, mock_style, mock_stringvar, mock_doublevar,
                               mock_data_manager_class, mock_get_config):
        """Test theme switching functionality"""
        # Setup mocks
        mock_root = MagicMock()
        mock_tk.return_value = mock_root
        mock_root.winfo_screenwidth.return_value = 1920
        mock_root.winfo_screenheight.return_value = 1080
        mock_root.after.return_value = "mock_timer_id"
        
        mock_stringvar.return_value = MagicMock()
        mock_doublevar.return_value = MagicMock()
        mock_style.return_value = MagicMock()
        
        # Mock config with multiple themes
        mock_config = MagicMock()
        mock_config.data_file = self.temp_file.name
        mock_config.themes = [
            self.test_theme,
            {'bg': '#ffffff', 'fg': '#000000', 'button_bg': '#dddddd', 'button_fg': '#000000'}
        ]
        mock_config.current_theme_index = 0
        mock_get_config.return_value = mock_config
        
        # Mock data manager
        mock_data_manager = MagicMock()
        mock_data_manager.projects = []
        mock_data_manager.get_project_aliases.return_value = []
        mock_data_manager.current_project_alias = None
        mock_data_manager_class.return_value = mock_data_manager
        
        widget = TickTockWidget()
        
        # Test theme methods exist
        self.assertTrue(hasattr(widget, 'cycle_theme'))
        self.assertTrue(hasattr(widget, 'get_current_theme'))
        
        # Test widget was created successfully
        self.assertIsNotNone(widget.config)
        self.assertIsNotNone(widget.data_manager)

if __name__ == '__main__':
    unittest.main()
